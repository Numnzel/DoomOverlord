#include "zscript/zs_hud/zs_hud_fonts.txt"
#include "zscript/zs_hud/zs_hud_powerups.txt"
#include "zscript/zs_hud/zs_hud_spells.txt"




Class MinimalStatusBar : BaseStatusBar {

	HUDFont mMM2BigFont;
	HUDFont mMM2SmallFont;
	InventoryBarState diparms;
	Array<Ammo> ownedAmmo;
	int curAmmoIndex;
	int healthInterpolated;
	int healthInterpolationPile;
	int manaInterpolated;
	int manaInterpolationPile;
	mixin PowerupValues;
	mixin SpellPropertiesList;
	
	// not used
	void DrawUnitBarImage(String unit, String overUnit, int monitor, Vector2 pos, int length, int flags = 0, double alpha = 1.0, Vector2 box = (-1, -1), Vector2 scale = (1, 1)) {		
		
		DrawImage(unit, (pos.x, pos.y), flags, alpha, box, scale);
		/*int healthClamp = (monitor > 100) ? 100 : monitor;
		
		for (int i = 0; i < healthClamp * length / 100; i++) {
			DrawImage(unit, (pos.x + i, pos.y), DI_ITEM_LEFT | flags, alpha, box, scale);
		}
		int overhealthClamp = (monitor - 100 > 100) ? 100 : monitor - 100;
		for (int i = 0; i < overhealthClamp * length / 100; i++) {
			DrawImage(overUnit, (pos.x + i, pos.y), DI_ITEM_LEFT | flags, alpha, box, scale);
		}*/
	}
	
	void DrawUnitBarCol(Color unit, Color overUnit, int monitor, int monitorMax, Vector2 pos, Vector2 size, int flags = 0) {
		
		if (monitor <= 0) return;
		
		int monitorMax2 = monitorMax+300;
		int monClamp = (monitor > monitorMax) ? monitorMax : monitor;
		int overmonClamp = (monitor > monitorMax2) ? monitorMax : monitor - monitorMax; // [numnzel] check parametrized values
		
		// fill the "normal" part
		Fill(unit, pos.x, pos.y, monClamp * size.x / monitorMax, size.y, flags);
		
		// fill the "over" part (for bonus health, armor)
		if (overmonClamp > 0) {
			if (overmonClamp > (monitorMax2-monitorMax)) overmonClamp = (monitorMax2-monitorMax); // [numnzel] check parametrized values overflow
			Fill(overunit, pos.x, pos.y, overmonClamp * size.x / (monitorMax2-monitorMax), size.y, flags);
		}
	}
	
	void DrawUnitBarGrad(Color uF, Color uT, Color ovuF, Color ovuT,
						 int monitor, int monitorMax, Vector2 pos, Vector2 size, int flags = 0, bool inverse = false) { // [numnzel] added inverse parameter
		
		Vector2 inverseSize = (inverse) ? size*-1 : size; // [numnzel] inverses the bar
		int inverseOffset = (inverse) ? size.x : 0; // [numnzel] make position corrections when the bar is inverted
		
		// get the change in color every iteration
		double uFD[4] = { 0.0, 0.0, 0.0, 0.0 };
		uFD[0] = (uF.a - uT.a) / size.y; uFD[1] = (uF.r - uT.r) / size.y;
		uFD[2] = (uF.g - uT.g) / size.y; uFD[3] = (uF.b - uT.b) / size.y;
		double ovuFD[4] = { 0.0, 0.0, 0.0, 0.0 };
		ovuFD[0] = (ovuF.a - ovuT.a) / size.y; ovuFD[1] = (ovuF.r - ovuT.r) / size.y;
		ovuFD[2] = (ovuF.g - ovuT.g) / size.y; ovuFD[3] = (ovuF.b - ovuT.b) / size.y;
		
		// draw bar, change color, rinse & repeat until done
		Color drawCol = "000000";
		Color overDrawCol = "000000";
		int cC[4] = { 0, 0, 0, 0 };
		int ovcC[4] = { 0, 0, 0, 0 };
		for (int y = 0; y < size.y; y++) {
			drawCol = Color(uF.a + cC[0], uF.r + cC[1], uF.g + cC[2], uF.b + cC[3]);
			overDrawCol = Color(ovuF.a + ovcC[0], ovuF.r + ovcC[1], ovuF.g + ovcC[2], ovuF.b + ovcC[3]);
			DrawUnitBarCol(drawCol, overDrawCol, monitor, monitorMax, (pos.x+inverseOffset, pos.y + y), (inverseSize.x, 1), flags);
			cC[0] -= uFD[0]; cC[1] -= uFD[1]; cC[2] -= uFD[2]; cC[3] -= uFD[3];
			ovcC[0] -= ovuFD[0]; ovcC[1] -= ovuFD[1]; ovcC[2] -= ovuFD[2]; ovcC[3] -= ovuFD[3];
		}
	}
	
	// makes my life easier
	Vector2 TexSize(String texture) { return Texman.GetScaledSize(TexMan.CheckForTexture(texture, TexMan.Type_Any)); }
	
	// draw the edges of a "hud box"
	Vector2, Vector2, Vector2, Vector2 DrawHUDBoxEdges(String corner, String edge, Vector2 pos, Vector2 size, int flags = 0, double alpha = 1) {
		// corners are ezpz
		DrawImage(corner.."TL", pos, DI_ITEM_LEFT_TOP | flags, alpha);
		DrawImage(corner.."TR", (pos.x + size.x, pos.y), DI_ITEM_RIGHT_TOP | flags, alpha);
		DrawImage(corner.."BL", (pos.x, pos.y + size.y), DI_ITEM_LEFT_BOTTOM | flags, alpha);
		DrawImage(corner.."BR", pos + size, DI_ITEM_RIGHT_BOTTOM | flags, alpha);
		
		// store the sizes of all the corners so we know where to draw the edges
		Vector2 tlCornerSize = TexSize(corner.."TL");
		Vector2 trCornerSize = TexSize(corner.."TR");
		Vector2 blCornerSize = TexSize(corner.."BL");
		Vector2 brCornerSize = TexSize(corner.."BR");
		
		// the edges are drawn as one image, just scaled on the x/y axis
		DrawImage(edge.."T", (pos.x + tlCornerSize.x, pos.y), DI_ITEM_LEFT_TOP | flags,
				  alpha, (-1, -1), (size.x - (tlCornerSize.x + trCornerSize.x), 1));
		DrawImage(edge.."B", (pos.x + blCornerSize.x, pos.y + size.y), DI_ITEM_LEFT_BOTTOM | flags,
				  alpha, (-1, -1), (size.x - (blCornerSize.x + brCornerSize.x), 1));
		
		DrawImage(edge.."L", (pos.x, pos.y + tlCornerSize.y), DI_ITEM_LEFT_TOP | flags,
				  alpha, (-1, -1), (1, size.y - (tlCornerSize.y + blCornerSize.y)));
		DrawImage(edge.."R", (pos.x + size.x, pos.y + blCornerSize.y), DI_ITEM_RIGHT_TOP | flags,
				  alpha, (-1, -1), (1, size.y - (trCornerSize.y + brCornerSize.y)));
		
		return tlCornerSize, trCornerSize, blCornerSize, brCornerSize;
	}
	
	void DrawHudBoxCol(String corner, String edge, Color fillColor, Vector2 pos, Vector2 size, int flags = 0, double alpha = 1) {
		// get the corner sizes
		Vector2 tlCornerSize, trCornerSize, blCornerSize, brCornerSize;
		[tlCornerSize, trCornerSize, blCornerSize, brCornerSize] = DrawHudBoxEdges(corner, edge, pos, size, flags, alpha);
		
		// fill in the inside
		fillColor = Color(int(alpha * fillColor.a), fillColor.r, fillColor.g, fillColor.b);
		Fill(fillColor, pos.x + tlCornerSize.x, pos.y + tlCornerSize.y,
			 size.x - (tlCornerSize.x + trCornerSize.x), size.y - (tlCornerSize.y + blCornerSize.y), flags);
	}

	override void Init() {
		Super.Init();
		// this has to be done, even if the HUD is fullscreen, it prevents a crash
		SetSize(0, 320, 200);
		
		// Create the font used for the fullscreen HUD
		Font fnt = "MM2FONTO";
		mMM2BigFont = HUDFont.Create(fnt);
		fnt = "MM2SFNTO";
		// the small font is monospace because it helps with centering and positioning
		mMM2SmallFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true);
		diparms = InventoryBarState.Create(null, Font.CR_UNTRANSLATED, 1, "ITEMBOX");
	}
	
	override void DrawAutomapHUD(double ticFrac) {
		// This uses the normal automap HUD but just changes the highlight color.
		DoDrawAutomapHUD(Font.CR_GREY, Font.CR_UNTRANSLATED);
	}
	
	override void Draw (int state, double TicFrac) {
	
		
		
		// create the list of owned ammo
		// this only contains ammo that the player has weapons for
		ownedAmmo.Clear();
		// credit to argv on zdf for the following if() {} block - my implementation for this was slow
		// as all fuck, and upon it being brought up, jesus was my original code bad D:
		// this should be far faster
		if (CPlayer) {
		
			setPowerupNames();
			setSpellProperties();
			
			for (let inv = CPlayer.mo.Inv; inv; inv = inv.Inv) {
				// [argv] look through the player pawn's inventory for weapons
				if (inv is "Weapon") {
					// [argv] take each ammo item, and add it to ownedAmmo if not already present
					let ammo = Weapon(inv).Ammo1;
					if (ammo && ownedAmmo.Size() == ownedAmmo.Find(ammo)) {
						ownedAmmo.Push(ammo);
					}
					
					ammo = Weapon(inv).Ammo2;
					if (ammo && ownedAmmo.Size() == ownedAmmo.Find(ammo)) {
						ownedAmmo.Push(ammo);
					}
				}
			}
		}
		
		Super.Draw(state, TicFrac);
		
		if (state == HUD_StatusBar)
		{
			BeginStatusBar();
			DrawMainBar(TicFrac);
		}
		else if (state == HUD_Fullscreen)
		{
			BeginHUD();
			DrawFullScreenStuff(TicFrac);
		}
	}
	
	void DrawMainBar(double TicFrac) {
	}
	
	void InterpolateValue(int value, out int interpolatedValue, out int pile, int speed = 2, int accel = 10) {
	
		int diff = max(interpolatedValue, value) - min(interpolatedValue, value);
		int curve = clamp((diff / max(1,accel)), 1, 4);
		int slowmo = (diff < 20 && diff > 0) ? 50/max(1,diff) : 0;
			
		if (++pile >= abs(speed)+slowmo) {
			
			pile = 0;
			
			if (interpolatedValue > value)
				interpolatedValue = (interpolatedValue - curve < value) ? value : interpolatedValue - curve;
			else if (interpolatedValue < value)
				interpolatedValue = (interpolatedValue + curve > value) ? value : interpolatedValue + curve;
		}
	}
	
	void DrawImageBar(string image, int imageH, int imageW, int posX, int posY, int flags = 0, double alpha = 1.0, Vector2 box = (-1,-1), Vector2 scale = (1.0,1.0)) {
		
		// check that scale is not 0....
		
		int imageWidthEnd = imageW / round(1.0/scale.x);
		int imageHeightEnd = imageH / round(1.0/scale.y);
		
		SetClipRect(posX+(-imageWidthEnd/2), posY-imageHeightEnd, imageWidthEnd, imageHeightEnd, DI_SCREEN_CENTER_BOTTOM);
		DrawImage(image, (posX, posY), DI_SCREEN_CENTER_BOTTOM | flags, alpha, box, scale);
		ClearClipRect();
	}
	

	/*
	int topRightTotal; // This is global to make this convenient
	override void DrawPowerups ()
	{
		StatFont sfnt;
		getStatFont(sfnt);
		double textSize = (sfnt.fnt.GetHeight() + sfnt.vspace) * 200.0/sfnt.scale.y;
		int totalSize = int( textSize*topRightTotal + (topRightTotal ? sfnt.tHeight : 0) );

		Vector2 pos = (-20, POWERUPICONSIZE * 5 / 4);
		double maxpos = screen.GetWidth() / 2;
		for (let iitem = CPlayer.mo.Inv; iitem != NULL; iitem = iitem.Inv)
		{
			let item = Powerup(iitem);
			if (item != null)
			{
				let icon = item.GetPowerupIcon();
				if (icon.IsValid() && !item.IsBlinking())
				{
					// If stats overlap, move it down
					while(pos.y - POWERUPICONSIZE < totalSize )
						pos.y += textSize;
					// Each icon gets a 32x32 block.
					DrawTexture(icon, pos, DI_SCREEN_RIGHT_TOP, 1.0, (POWERUPICONSIZE, POWERUPICONSIZE));
					pos.x -= POWERUPICONSIZE;
					if (pos.x < -maxpos)
					{
						pos.x = -20;
						pos.y += (POWERUPICONSIZE) * 3 / 2;
					}
				}
			}
		}
	}*/
	
	int CreatePercent(int monitor, int monitorMax, int relativeValue) {
		
		double monitorD = monitor;
		
		return round(monitorD * relativeValue/monitorMax);
	}
	
	void DrawFullScreenStuff(double TicFrac) {
		if (CPlayer && !automapactive) {
			
			// flags used for positioning text
			int tAlign = DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_BOTTOM;
			// alpha setting for the boxes, clamped between 1 and 0 or else everything goes wrong
			double alphaSetting = Clamp(CVar.GetCVar("gzs_boxalpha", CPlayer).GetFloat(), 0, 1);
			// player data
			let pmo = CPlayer.mo;
			
			// health
			int healthXsiz = 300;
			int healthYsiz = 16;
			int healthXpos = -35-healthXsiz;
			int healthCurrent = pmo.health;
			
			InterpolateValue(healthCurrent, healthInterpolated, healthInterpolationPile); // [numnzel] added interpolation
			
			//DrawHudBoxCol("HBCORN", "HBEDGE", Color(128, 0, 0, 0), (healthXpos, -72), (healthXsiz, 64), DI_SCREEN_CENTER_BOTTOM, alphaSetting);
			DrawString(mMM2SmallFont, "HEALTH", (-99, -64), tAlign);
			DrawString(mMM2BigFont, FormatNumber(healthInterpolated, 0, 9), (-99, -48), tAlign);
			//DrawString(mMM2BigFont, FormatNumber(CPlayer.health, 0, 9), (-99, -48), tAlign);
			DrawHudBoxCol("SBCORN", "SBEDGE", Color(64, 0, 0, 0), (healthXpos+13, -25), (healthXsiz-26, healthYsiz+2), DI_SCREEN_CENTER_BOTTOM);
			DrawUnitBarGrad(Color(255, 255, 0, 0), Color(255, 64, 0, 0), Color(255, 255, 208, 0), Color(255, 64, 48, 0),
							healthInterpolated, pmo.GetMaxHealth(TRUE), (healthXpos+14, -24), (healthXsiz-28, healthYsiz), DI_SCREEN_CENTER_BOTTOM, TRUE);
			
			
			// powerups
			Array<String> PowerupStrings;
			int powerlength = 0;
			
			//DrawString(mMM2BigFont, FormatNumber(PowerupNames.size(), 0, 9), (99, -48), tAlign);
			
			for(int i = 0; i < PowerupNames.size(); i++) {
				let inv = Powerup(pmo.FindInventory(PowerupNames[i]));
				
				if(inv && inv.EffectTics > 0) {
					
					string s = string.format("%d", inv.EffectTics/Thinker.TICRATE);
					//string s = string.format("%s: %02d:%02d",StringTable.Localize(PowerupDisplay[i]),inv.EffectTics/Thinker.TICRATE/60, inv.EffectTics/Thinker.TICRATE%60);
					PowerupStrings.push(s);
					//powerlength = max(powerlength, fnt.StringWidth(s));
				}
			}
			for(int i = 0; i < PowerupStrings.size(); i++) {
			
				
				DrawString(mMM2BigFont, PowerupStrings[i], (99, (-13*i)-58), tAlign);
			}
			
			// doomguy
			DrawHudBoxCol("HBCORN", "HBEDGE", Color(128, 0, 0, 0), (-27, -72), (54, 64), DI_SCREEN_CENTER_BOTTOM, alphaSetting);
			DrawTexture(GetMugShot(5), (0, -40), DI_ITEM_CENTER | DI_SCREEN_CENTER_BOTTOM, 1, (-1, -1), (1.5, 1.5));
			
			// mana
			int manaXpos = 35;
			int manaXsiz = 300;
			int manaYsiz = 16;
			int manaAmount = pmo.FindInventory("mana").Amount;
			int manaCost = pmo.FindInventory("spellid").Amount;
			int manaMax = pmo.FindInventory("maxmana").Amount;
			int manaCapability = manaAmount-manaCost;
			Color manaColorCostG1 = Color(255, 160, 16, 255);
			Color manaColorCostG2 = Color(255, 0, 255, 255);
			Color manaColorCostB1 = Color(255, 160, 16, 255);
			Color manaColorCostB2 = Color(255, 255, 128, 0);
			Color manaColorManaG1 = Color(255, 160, 16, 255);
			Color manaColorManaG2 = Color(255, 16, 16, 255);
			Color manaColorManaB1 = Color(128, 255, 255, 255);
			Color manaColorManaB2 = Color(128, 16, 16, 16);
			
			
			InterpolateValue(manaAmount, manaInterpolated, manaInterpolationPile);
			
			//int manaClamp = (manaCapability+manaCost > manaMax) ? manaMax : manaCapability+manaCost;
			
			//DrawHudBoxCol("HBCORN", "HBEDGE", Color(128, 0, 0, 0), (manaXpos, -72), (manaXsiz, 64), DI_SCREEN_CENTER_BOTTOM, alphaSetting);
			DrawString(mMM2SmallFont, "MANA", (99, -64), tAlign);
			DrawString(mMM2BigFont, FormatNumber(manaInterpolated, 0, 9), (99, -48), tAlign);
			DrawHudBoxCol("SBCORN", "SBEDGE", Color(64, 0, 0, 0), (manaXpos+13, -25), (manaXsiz-26, manaYsiz+2), DI_SCREEN_CENTER_BOTTOM);
			
			if (manaCost > manaAmount) {
				manaColorCostG1 = manaColorCostB1;
				manaColorCostG2 = manaColorCostB2;
			}
			
			DrawUnitBarGrad(manaColorCostG1, manaColorCostG2, manaColorCostG1, manaColorCostG2,
							manaInterpolated, manaMax, (manaXpos+14, -24), (manaXsiz-28, manaYsiz), DI_SCREEN_CENTER_BOTTOM);
			
			DrawUnitBarGrad(manaColorManaG1, manaColorManaG2, manaColorManaB1, manaColorManaB2,
							manaCapability, manaMax, (manaXpos+14, -24), (manaXsiz-28, manaYsiz), DI_SCREEN_CENTER_BOTTOM);
			
			
			// spells
			int spellSlots = 10;
			int separation = 64;
			int separate[10];
			
			for (int i = 0; i < spellSlots; i++) {
				
				separate[i] = separation*i;
			}
			
			int imageSize = 256;
			int spellsXoffs = 8;
			int spellsYoffs = 34;
			
			
			//separate[i] = i * separation * (i%2 * -1)
			for (int k = 0; k < 3; k++) {
				for (int i = 0; i < spellSlots; i++) {
					
					let inv2 = Powerup(pmo.FindInventory(momongaSpells[i][k].cd));
					
					int spellsXpos = separate[i]-(separate[spellSlots-1]/2)+(spellsXoffs*k);
					int spellsYpos = -82-(spellsYoffs*k);
					
					
					// Draw spells icons
					DrawImageBar(momongaSpells[i][k].tx, imageSize, imageSize, spellsXpos, spellsYpos, 0, 0.5, (-1,-1), (0.16,0.16)); // Scale works better with multiples of 2
					
					// Draw cooldown icons
					if(inv2 && inv2.EffectTics > 0) {
						
						int spellCDduration = momongaSpells[i][k].du;// int, int GetEffectTicsForItem(class<Inventory> item) const ... inv2.maxtics;
						int spellCDtime = inv2.EffectTics/Thinker.TICRATE;
						string spellCDtimeS = string.format("%d", spellCDtime);
						int monitorCD = CreatePercent(spellCDtime, spellCDduration, imageSize);
						
						DrawString(mMM2SmallFont, spellCDtimeS, (spellsXpos, spellsYpos-16), tAlign);
						DrawImageBar("CDWN00", monitorCD, imageSize, spellsXpos, spellsYpos, 0, 1.0, (-1,-1), (0.16,0.16));
						DrawString(mMM2SmallFont, spellCDtimeS, (spellsXpos, spellsYpos-16), tAlign);
						//DrawString(mMM2SmallFont, spellCDtimeS, (spellsXpos, spellsYpos-16), tAlign);
						//string s = string.format("%s: %02d:%02d",StringTable.Localize(PowerupDisplay[i]),inv2.EffectTics/Thinker.TICRATE/60, inv2.EffectTics/Thinker.TICRATE%60);
						//PowerupStrings.push(z);
						//powerlength = max(powerlength, fnt.StringWidth(s));
					}
					
					// Draw spell selector icon over selected spell
					if (manaCost == momongaSpells[i][k].id) {
						DrawImageBar("SELEA0", imageSize, imageSize, spellsXpos, spellsYpos, 0, 1.0, (-1,-1), (0.16,0.16));
					}
				}
			}
			
			
			
			/*
			int imageHeight = 256;
			int imageWidth = 256;
			double imageScale = 0.25;
			int imageScaleInt = round(1.0/imageScale);
			int imageWidthEnd = imageWidth / imageScaleInt;
			int imageHeightEnd = imageHeight / imageScaleInt;
			//DrawString(imageWidthEnd);
			
			int posY = -96;
			int posX = -imageWidthEnd / 2;
			
			//int ceiling = -160;
			SetClipRect(-128, posY-imageHeightEnd, 512, 512, DI_SCREEN_CENTER_BOTTOM);
			DrawUnitBarImage("SPELLA0", "SPELLA0", healthInterpolated, (0, posY), 1, DI_SCREEN_CENTER_BOTTOM, 1.0, (-1,-1), (imageScale,imageScale));
			ClearClipRect();
			*/
			
			
			
			
			int invY = -96;
			/*
			if (CVar.GetCVar("gzs_ammobar", CPlayer).GetInt()) {
				// ammo pool display
				DrawHudBoxCol("SBCORN", "SBEDGE", Color(96, 0, 0, 0), (-235, -92), (470, 16), DI_SCREEN_CENTER_BOTTOM, alphaSetting);
				// the ammo text actually draws out of its box, this clipping rectangle just makes the overflow invisible
				SetClipRect(-234, -91, 468, 14, DI_SCREEN_CENTER_BOTTOM);
				// figure out what ammo the current weapon is using
				for (int i = 0; i < ownedAmmo.Size(); i++) {
					let a = ownedAmmo[i];
					if (CPlayer.ReadyWeapon) {
						if (CPlayer.ReadyWeapon.Ammo1 == ownedAmmo[i]) {
							curAmmoIndex = i;
							break;
						}
						else if (CPlayer.ReadyWeapon.Ammo1 == NULL &&
								 CPlayer.ReadyWeapon.Ammo2 == ownedAmmo[i]) {
							curAmmoIndex = i;
							break;
						}
					}
				}
				if (ownedAmmo.Size() > 0) {
					let curC = ownedAmmo[curAmmoIndex];
					// get the length of the string of the player's current ammo
					int middleStrWidth = (curC.GetTag().." "..curC.Amount.."/"..curC.MaxAmount).Length();
					// roughly the amount of spaces needed to keep the strings from clipping
					int drawOff = ceil(middleStrWidth / 2.0);
					// two strings - one for the left side of the current ammo, one for the right
					String lDisplayString = "";
					String rDisplayString = "";
					// form the strings
					for (int i = 0; i < ownedAmmo.Size(); i++) {
						let c = ownedAmmo[i];
						if (i > curAmmoIndex) {
							rDisplayString = rDisplayString..(" "..c.GetTag().." "..c.Amount.."/"..c.MaxAmount);
						}
						else if (i < curAmmoIndex) {
							lDisplayString = lDisplayString..(c.GetTag().." "..c.Amount.."/"..c.MaxAmount.." ");
						}
					}
					// add a bunch of spaces to the l and r strings so they don't clip with the main string
					for (int i = 0; i < drawOff; i++) {
						rDisplayString = " "..rDisplayString;
						lDisplayString = lDisplayString.." ";
					}
					// work out which color to use for the main string
					int fontTranslation;
					if (CPlayer.ReadyWeapon) {
						if (CPlayer.ReadyWeapon.Ammo1 == curC) {
							fontTranslation = Font.CR_UNTRANSLATED;
						}
						else if (CPlayer.ReadyWeapon.Ammo1 == NULL &&
								 CPlayer.ReadyWeapon.Ammo2 == curC) {
							fontTranslation = Font.CR_UNTRANSLATED;
						}
						else { fontTranslation = FONT.CR_DARKRED; }
					}
					else { fontTranslation = FONT.CR_DARKRED; }
					DrawString(mMM2SmallFont, curC.GetTag().." "..curC.Amount.."/"..curC.MaxAmount, (0, -88), tAlign, fontTranslation);
					DrawString(mMM2SmallFont, lDisplayString, (0, -88), DI_SCREEN_CENTER_BOTTOM | DI_TEXT_ALIGN_RIGHT, Font.CR_DARKRED);
					DrawString(mMM2SmallFont, rDisplayString, (0, -88), DI_SCREEN_CENTER_BOTTOM, Font.CR_DARKRED);
				}
				// get rid of the clipping rectangle
				ClearClipRect();
			}
			else { invY = -76; }
			*/
			// inv bar
			if (isInventoryBarVisible()) {
				DrawInventoryBar(diparms, (0, invY), 7, DI_SCREEN_CENTER_BOTTOM | DI_ITEM_HCENTER | DI_ITEM_BOTTOM);
			}
			
			// level stats stuff
			bool secrets = CVar.GetCVar("gzs_stats_secrets", CPlayer).GetInt();
			bool monsters = CVar.GetCVar("gzs_stats_monsters", CPlayer).GetInt();
			bool items = CVar.GetCVar("gzs_stats_items", CPlayer).GetInt();
			bool timer = CVar.GetCVar("gzs_stats_timer", CPlayer).GetInt();
			bool gametimer = CVar.GetCVar("gzs_stats_gametimer", CPlayer).GetInt();
			
			font fnt = "MM2SFNTO";
			int fntHeight = fnt.GetHeight();
			int y = 8;
			if (timer) {
				DrawString(mMM2SmallFont, level.TimeFormatted(), (-8, y), DI_SCREEN_RIGHT_TOP | DI_TEXT_ALIGN_RIGHT);
				y += fntHeight + 1;
			}
			if (gametimer) {
				DrawString(mMM2SmallFont, level.TimeFormatted(true), (-8, y), DI_SCREEN_RIGHT_TOP | DI_TEXT_ALIGN_RIGHT);
				y += fntHeight + 1;
			}
			
			y = 8;
			if (monsters) {
				DrawString(mMM2SmallFont, Stringtable.Localize("$AM_MONSTERS").." "..level.killed_monsters.."/"..level.total_monsters, (8, y));
				y += fntHeight + 1;
			}
			if (secrets) {
				DrawString(mMM2SmallFont, Stringtable.Localize("$AM_SECRETS").." "..level.found_secrets.."/"..level.total_secrets, (8, y));
				y += fntHeight + 1;
			}
			if (items) {
				DrawString(mMM2SmallFont, Stringtable.Localize("$AM_ITEMS").." "..level.found_items.."/"..level.total_items, (8, y));
				y += fntHeight + 1;
			}
			
		}
	}
}
